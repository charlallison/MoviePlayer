<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
            xmlns:sw="clr-namespace:WpfStyleableWindow.StyleableWindow;assembly=VideoPlayerView"
            mc:Ignorable="d" x:Class="Movies.App"
    >
    <Application.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Movies;component/Resources/Styles.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/VirtualizingListView;component/Resources/Items.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/VirtualizingListView;component/Resources/ViewStyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <LinearGradientBrush x:Key="ProgressBarBackground" EndPoint="1,0" StartPoint="0,0">
                <GradientStop Color="#BABABA" Offset="0"/>
                <GradientStop Color="#C7C7C7" Offset="0.5"/>
                <GradientStop Color="#BABABA" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ProgressBarBorderBrush" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#B2B2B2" Offset="0"/>
                <GradientStop Color="#8C8C8C" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ProgressBarGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#50FFFFFF" Offset="0.5385"/>
                <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ProgressBarTopHighlight" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#80FFFFFF" Offset="0.05"/>
                <GradientStop Color="#00FFFFFF" Offset="0.25"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" EndPoint="1,0" StartPoint="0,0">
                <GradientStop Color="#00FFFFFF" Offset="0"/>
                <GradientStop Color="#60FFFFFF" Offset="0.4"/>
                <GradientStop Color="#60FFFFFF" Offset="0.6"/>
                <GradientStop Color="#00FFFFFF" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeLeft" EndPoint="1,0" StartPoint="0,0">
                <GradientStop Color="#0C000000" Offset="0"/>
                <GradientStop Color="#20000000" Offset="0.3"/>
                <GradientStop Color="#00000000" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeRight" EndPoint="1,0" StartPoint="0,0">
                <GradientStop Color="#00000000" Offset="0"/>
                <GradientStop Color="#20000000" Offset="0.7"/>
                <GradientStop Color="#0C000000" Offset="1"/>
            </LinearGradientBrush>
            <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectLeft" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,0.5,0.5">
                <GradientStop Color="#60FFFFC4" Offset="0"/>
                <GradientStop Color="#00FFFFC4" Offset="1"/>
            </RadialGradientBrush>
            <LinearGradientBrush x:Key="ProgressBarIndicatorLightingEffect" EndPoint="0,0" StartPoint="0,1">
                <GradientStop Color="#60FFFFC4" Offset="0"/>
                <GradientStop Color="#00FFFFC4" Offset="1"/>
            </LinearGradientBrush>
            <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectRight" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,-0.5,0.5">
                <GradientStop Color="#60FFFFC4" Offset="0"/>
                <GradientStop Color="#00FFFFC4" Offset="1"/>
            </RadialGradientBrush>
            <LinearGradientBrush x:Key="ProgressBarIndicatorGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#90FFFFFF" Offset="0.5385"/>
                <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
            </LinearGradientBrush>
            <Style x:Key="ProgressBarStyle1" TargetType="{x:Type ProgressBar}">
                <Setter Property="Foreground" Value="#01D328"/>
                <Setter Property="Background" Value="{StaticResource ProgressBarBackground}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ProgressBarBorderBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ProgressBar}">
                            <Grid x:Name="TemplateRoot" SnapsToDevicePixels="true">
                                <Border Background="{StaticResource ProgressBarGlassyHighlight}" CornerRadius="0" Margin="1" d:IsHidden="True"/>
                                <Border BorderThickness="0" Background="{DynamicResource ProgressBarIndicatorLightingEffectRight}" Margin="1" d:IsHidden="True"/>
                                <Rectangle x:Name="PART_Track" Margin="1"/>
                                <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
                                    <Grid x:Name="Foreground">
                                        <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                                        <Grid x:Name="Animation" ClipToBounds="true">
                                            <Rectangle x:Name="PART_GlowRect" Fill="{StaticResource ProgressBarIndicatorAnimatedFill}" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="100"/>
                                        </Grid>
                                        <Grid x:Name="Overlay">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition MaxWidth="15"/>
                                                <ColumnDefinition Width="0.1*"/>
                                                <ColumnDefinition MaxWidth="15"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Rectangle x:Name="LeftDark" Fill="{StaticResource ProgressBarIndicatorDarkEdgeLeft}" Margin="1,1,0,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2"/>
                                            <Rectangle x:Name="RightDark" Grid.Column="2" Fill="{StaticResource ProgressBarIndicatorDarkEdgeRight}" Margin="0,1,1,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2"/>
                                            <Rectangle x:Name="LeftLight" Grid.Column="0" Fill="{StaticResource ProgressBarIndicatorLightingEffectLeft}" Grid.Row="2"/>
                                            <Rectangle x:Name="CenterLight" Grid.Column="1" Fill="{StaticResource ProgressBarIndicatorLightingEffect}" Grid.Row="2"/>
                                            <Rectangle x:Name="RightLight" Grid.Column="2" Fill="{StaticResource ProgressBarIndicatorLightingEffectRight}" Grid.Row="2"/>
                                            <Border x:Name="Highlight1" Background="{StaticResource ProgressBarIndicatorGlassyHighlight}" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                                            <Border x:Name="Highlight2" Background="{StaticResource ProgressBarTopHighlight}" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                                        </Grid>
                                    </Grid>
                                </Decorator>
                                <TextBlock x:Name="___TextBlock____" HorizontalAlignment="Left" TextTrimming="CharacterEllipsis" Padding="3,3,0,0"  Foreground="White" Text="{Binding CurrentDir}" VerticalAlignment="Center" FontSize="12" Margin="3,6.52,0,6.52"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Orientation" Value="Vertical">
                                    <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsIndeterminate" Value="true">
                                    <Setter Property="Visibility" TargetName="LeftDark" Value="Collapsed"/>
                                    <Setter Property="Visibility" TargetName="RightDark" Value="Collapsed"/>
                                    <Setter Property="Visibility" TargetName="LeftLight" Value="Collapsed"/>
                                    <Setter Property="Visibility" TargetName="CenterLight" Value="Collapsed"/>
                                    <Setter Property="Visibility" TargetName="RightLight" Value="Collapsed"/>
                                    <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsIndeterminate" Value="false">
                                    <Setter Property="Background" TargetName="Animation" Value="#80B5FFA9"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <!--Windows Style-->

            <SolidColorBrush x:Key="WindowColor" Color="Red"/>
            <SolidColorBrush x:Key="WindowBackColor" Color="#FF191919"/>
            <SolidColorBrush x:Key="WindowForeColor" Color="#FF9C9797"/>
            <SolidColorBrush x:Key="WindowForeHighlightColor" Color="White"/>
            <SolidColorBrush x:Key="WindowButtonColor" Color="Blue"/>
            <SolidColorBrush x:Key="WindowButtonOverColor" Color="LightBlue"/>
            <SolidColorBrush x:Key="WindowButtonPressedColor" Color="DarkBlue"/>



            <Style x:Key="CloseStyle" TargetType="{x:Type Button}">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Width" Value="25"/>
                <Setter Property="Cursor" Value="Arrow"/>
                <Setter Property="Background" Value="{StaticResource WindowBackColor}"/>
                <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid  Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Grid Width="9" Height="9" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Grid.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform Angle="90"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Grid.RenderTransform>
                                    <Rectangle x:Name="recta" VerticalAlignment="Top" SnapsToDevicePixels="True" Fill="{ TemplateBinding Foreground}" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" RenderTransformOrigin="0,0">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform AngleY="45"/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                    <Rectangle VerticalAlignment="Bottom" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stroke="{TemplateBinding Foreground}" StrokeThickness="{Binding ElementName=recta,Path=StrokeThickness}" RenderTransformOrigin="0,0">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform AngleY="-45"/>
                                                <RotateTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                                    <Setter TargetName="recta" Property="StrokeThickness" Value="1.3"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="maxbtn" TargetType="{x:Type Button}">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Width" Value="25"/>
                <Setter Property="Cursor" Value="Arrow"/>
                <Setter Property="Background" Value="{StaticResource WindowBackColor}"/>
                <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="maxwrapper" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Grid Width="10" Height="10" >
                                    <Rectangle SnapsToDevicePixels="True" Fill="{TemplateBinding Background}" StrokeThickness=".8" Stroke="{TemplateBinding Foreground}"/>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="normbtn" TargetType="{x:Type Button}">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Width" Value="25"/>
                <Setter Property="Cursor" Value="Arrow"/>
                <Setter Property="ToolTip" Value="Maximize"/>
                <Setter Property="Background" Value="{StaticResource WindowBackColor}"/>
                <Setter Property="BorderBrush" Value="{StaticResource WindowBackColor}"/>
                <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <StackPanel Orientation="Vertical">
                                <Grid x:Name="normwrapper" Visibility="Visible" 
                                      Background="{TemplateBinding Background}" 
                                      Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                    <Grid Width="8" Height="8" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <Grid.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform/>
                                                <TranslateTransform Y="2"/>
                                            </TransformGroup>
                                        </Grid.RenderTransform>
                                        <Rectangle Panel.ZIndex="10" Fill="{TemplateBinding BorderBrush}"  StrokeThickness=".8"  Stroke="{TemplateBinding Foreground}" SnapsToDevicePixels="True"/>
                                        <Rectangle Panel.ZIndex="-1" StrokeThickness=".8"   Stroke="{TemplateBinding Foreground}" SnapsToDevicePixels="True" RenderTransformOrigin="0.5,0.5">
                                            <Rectangle.RenderTransform>
                                                <TransformGroup>
                                                    <TranslateTransform Y="-3" X="3"/>
                                                </TransformGroup>
                                            </Rectangle.RenderTransform>
                                        </Rectangle>
                                    </Grid>
                                </Grid>
                                <Grid x:Name="maxwrapper" Visibility="Visible" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                    <Grid Width="10" Height="10" >
                                        <Rectangle SnapsToDevicePixels="True" Fill="{TemplateBinding Background}" StrokeThickness=".8" Stroke="{TemplateBinding Foreground}"/>
                                    </Grid>
                                </Grid>
                            </StackPanel>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding WindowState, 
                                            RelativeSource={RelativeSource FindAncestor, 
                                           AncestorType={x:Type Window}}}" Value="Normal"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="ToolTip" Value="Maximize"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="normwrapper"/>
                                    <Setter Property="Visibility" Value="Visible" TargetName="maxwrapper"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding WindowState, 
                                            RelativeSource={RelativeSource FindAncestor, 
                                           AncestorType={x:Type Window}}}" Value="Maximized"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="ToolTip" Value="Restore"/>
                                    <Setter Property="Visibility" Value="Visible" TargetName="normwrapper"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="maxwrapper"/>
                                </MultiDataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="minbtn" TargetType="{x:Type Button}">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Width" Value="25"/>
                <Setter Property="Cursor" Value="Arrow"/>
                <Setter Property="Background" Value="{StaticResource WindowBackColor}"/>
                <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid x:Name="wrapper" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Grid Width="10" Height="10" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Rectangle Fill="{TemplateBinding Foreground}" Stroke="{TemplateBinding Foreground}" 
                                           StrokeThickness="1" VerticalAlignment="Bottom" SnapsToDevicePixels="True"/>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground" 
                                            Value="{StaticResource WindowForeHighlightColor}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!---red window brushes-->
            <!--<SolidColorBrush x:Key="WindowColor" Color="DarkRed"/>
        <SolidColorBrush x:Key="WindowBackColor" Color="DarkRed"/>
        <SolidColorBrush x:Key="WindowForeColor" Color="White"/>
        <SolidColorBrush x:Key="WindowForeHighlightColor" Color="White"/>
        <SolidColorBrush x:Key="WindowButtonColor" Color="OrangeRed"/>
        <SolidColorBrush x:Key="WindowButtonOverColor" Color="Orange"/>
        <SolidColorBrush x:Key="WindowButtonPressedColor" Color="DarkOrange"/>-->

            <!--The window template and it's components -->

            <sw:WindowMinimizeCommand x:Key="MinimizeCommand"></sw:WindowMinimizeCommand>
            <sw:WindowMaximizeCommand x:Key="MaximizeCommand"></sw:WindowMaximizeCommand>
            <sw:WindowCloseCommand x:Key="CloseCommand"></sw:WindowCloseCommand>



            <Style TargetType="{x:Type Button}" x:Key="WindowButton">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Width" Value="25"/>
                <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                                    <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                                    <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                                    <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Image}" x:Key="WindowIcon">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Width" Value="25"/>
            </Style>

            <!--<ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
                <Grid Background="{StaticResource WindowBackColor}">
                     <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                    <Grid >
                        <DockPanel LastChildFill="True">
                            -->
            <!--<Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>-->
            <!--
                            <Grid Grid.Row="0" Height="35"   
                                  DockPanel.Dock="Top" Visibility="{Binding WindowsControl,FallbackValue=Visible}" >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="120"/>
                                </Grid.ColumnDefinitions>

                                <Label Grid.Column="0"                                          
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"                                               
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
                                    <Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                         
                                    Width="18"                                           
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                           
                                    sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
                                </Label>

                                <StackPanel Grid.Column="1" DockPanel.Dock="Left" Orientation="Horizontal">
                                    <Label  Content="{TemplateBinding Property=Title}" Padding="4,3,0,0"                                                                                  
                                    HorizontalContentAlignment="Left"
                                    VerticalContentAlignment="Stretch"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Foreground="{TemplateBinding Foreground}"                                           
                                    FontSize="16"
                                    sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.RightButtonShow="true">
                                    </Label>
                                    <Button Margin="3" Width="20" Height="20">

                                    </Button>

                                </StackPanel>

                                <Label  sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.RightButtonShow="true"
                                HorizontalAlignment="Stretch" Grid.Column="2" VerticalAlignment="Stretch"/>


                                <StackPanel Grid.Column="3" Orientation="Horizontal" >
                                        <Button DockPanel.Dock="Right" Height="32"  Width="40" ToolTip="Minimize" Style="{StaticResource  minbtn}" Background="Transparent" Command="{StaticResource MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"></Button>
                                        <Button DockPanel.Dock="Right" Height="32"  Width="40" ToolTip="{Binding MaxbtnTooltip}" Background="Transparent" Style="{Binding StyleChanger, FallbackValue={StaticResource maxbtn}}" Command="{StaticResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"></Button>
                                        <Button DockPanel.Dock="Right" Height="32"  Width="40" ToolTip="Close" Background="Transparent" Style="{StaticResource CloseStyle}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"></Button>
                                </StackPanel>

                            </Grid>

                            <Grid Background="{TemplateBinding Background}">
                                <AdornerDecorator>
                                    <ContentPresenter x:Name="WindowContent"/>
                                </AdornerDecorator>
                                <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                            </Grid>
                        </DockPanel>

                      
                </Grid>
                    
                </Border>  
                        <Thumb Background="Transparent" x:Name="ThumbTop" Height="4" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                        <Thumb Background="Transparent" x:Name="ThumbTopLeft" Height="5" Width="5" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                        <Thumb Background="Transparent" x:Name="ThumbBottom" Height="4" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                        <Thumb Background="Transparent" x:Name="ThumbTopRight" Height="5" Width="5" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                        <Thumb Background="Transparent" x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="4" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                        <Thumb Background="Transparent" x:Name="ThumbBottomRight" Height="5" Width="5" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                        <Thumb Background="Transparent" x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="4" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                        <Thumb Background="Transparent" x:Name="ThumbBottomLeft" Height="5" Width="5" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Grid.Effect>
                        <DropShadowEffect   Direction="315" ShadowDepth="1.1" Color="Red" BlurRadius="0" Opacity=".8"/>
                    </Grid.Effect>
                </Grid>
               
                

                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                            <Condition Property="WindowState" Value="Normal"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>-->

            <!--<ControlTemplate x:Key="CustomWindowTemplate" TargetType="{x:Type Window}">
                <Grid Background="{StaticResource WindowBackColor}">
                    <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid >
                            <DockPanel LastChildFill="True">
                                -->
            <!--<Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>-->
            <!--<Grid Grid.Row="0"   DockPanel.Dock="Top" Visibility="{Binding WindowsControl,FallbackValue=Visible}" >
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition Width="auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="75"/>
                                    </Grid.ColumnDefinitions>

                                    <Label Grid.Column="0"                                          
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"                                               
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
                                        <Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                         
                                    Width="18"                                           
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                           
                                    sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
                                    </Label>

                                    <StackPanel Grid.Column="1" DockPanel.Dock="Left" Orientation="Horizontal">
                                        <Label  Content="{TemplateBinding Property=Title}" Padding="4,3,0,0"                                                                                  
                                    HorizontalContentAlignment="Left"
                                    VerticalContentAlignment="Stretch"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Foreground="{TemplateBinding Foreground}"                                           
                                    FontSize="16"
                                    sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.RightButtonShow="true">
                                        </Label>
                                        <Button Margin="3" Width="20" Height="20">

                                        </Button>

                                    </StackPanel>

                                    <Label  sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.RightButtonShow="true"
                                HorizontalAlignment="Stretch" Grid.Column="2" VerticalAlignment="Stretch"/>


                                    <StackPanel Grid.Column="3" Orientation="Horizontal" >
                                        <Button DockPanel.Dock="Right" ToolTip="Minimize" Style="{StaticResource  minbtn}" Command="{StaticResource MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"></Button>
                                        <Button DockPanel.Dock="Right" ToolTip="{Binding MaxbtnTooltip}" Style="{Binding StyleChanger, FallbackValue={StaticResource maxbtn}}" Command="{StaticResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"></Button>
                                        <Button DockPanel.Dock="Right" ToolTip="Close"  Style="{StaticResource CloseStyle}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"></Button>
                                    </StackPanel>

                                </Grid>-->
            <!--

                                <Grid Background="{TemplateBinding Background}">
                                    <AdornerDecorator>
                                        <ContentPresenter x:Name="WindowContent"/>
                                    </AdornerDecorator>
                                    <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                                </Grid>
                            </DockPanel>


                        </Grid>

                    </Border>
                    <Thumb Background="Transparent" x:Name="ThumbTop" Height="4" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbTopLeft" Height="5" Width="5" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbBottom" Height="4" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbTopRight" Height="5" Width="5" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="4" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbBottomRight" Height="5" Width="5" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="4" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbBottomLeft" Height="5" Width="5" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Grid.Effect>
                        <DropShadowEffect   Direction="315" ShadowDepth="1.1" Color="Red" BlurRadius="0" Opacity=".8"/>
                    </Grid.Effect>
                </Grid>



                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                            <Condition Property="WindowState" Value="Normal"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>-->

            <!-- the custom window style and the window template 
        Here you can customize the look of the window without having to touch the control template 
        or comment out the brushes and create a new style (see the red style below)-->

            <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
                <Grid Background="{StaticResource WindowBackColor}">
                    <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >

                        <DockPanel LastChildFill="True" Grid.Column="0">
                            <Grid Background="{TemplateBinding Background}">
                                <AdornerDecorator>
                                    <ContentPresenter x:Name="WindowContent"/>
                                </AdornerDecorator>
                                <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                            </Grid>
                        </DockPanel>
                    </Border>
                    <Thumb Background="Transparent" x:Name="ThumbTop" Height="4" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbTopLeft" Height="5" Width="5" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbBottom" Height="4" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbTopRight" Height="5" Width="5" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="4" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbBottomRight" Height="5" Width="5" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="4" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Thumb Background="Transparent" x:Name="ThumbBottomLeft" Height="5" Width="5" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                    <Grid.Effect>
                        <DropShadowEffect   Direction="315" ShadowDepth="1.1" Color="Red" BlurRadius="0" Opacity=".8"/>
                    </Grid.Effect>
                </Grid>



                <ControlTemplate.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                            <Condition Property="WindowState" Value="Normal"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                    </MultiTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
                <Setter Property="WindowStyle" Value="None"/>
                <Setter Property="AllowsTransparency" Value="True"/>
                <Setter Property="MinWidth" Value="200"/>
                <Setter Property="MinHeight" Value="46"/>
                <!--CaptionHeight + ResizeBorderThickness * 2-->
                <Setter Property="Background" Value="Yellow"/>
                <Setter Property="BorderBrush" Value="YellowGreen"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="DarkRed"/>
                <Setter Property="Template" Value="{StaticResource WindowTemplate}"/>
            </Style>

            <!--the red style window-->
            <Style x:Key="RedWindowStyle" TargetType="{x:Type Window}">
                <Setter Property="AllowsTransparency" Value="True"/>
                <Setter Property="WindowStyle" Value="None"/>
                <Setter Property="Background" Value="Black"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Cursor" Value="Arrow"/>
                <Setter Property="Margin" Value="-1"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <!--<Setter Property="Template" Value="{StaticResource WindowTemplate}"/>-->

            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
